# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-node-browsers
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install --no-dev

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: npm install
      - run: npm run test
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
  

      # prepare the database
      # - run: touch storage/testing.sqlite
      # - run: php artisan migrate --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
  deploy:
    machine:
        enabled: true
    #working_directory: /var/www/progprog.fun
    steps: 
      - add_ssh_keys:
          fingerprints:
              - e8:eb:18:fa:39:9e:d6:af:aa:ff:37:5e:f0:9d:e0:31
      - run: ls -ls 
      - run: cd / 
      - run: ls -ls
      - run: cd /var/www/progprog.fun && git pull
workflows:
   version: 2
   build-and-deploy:
     jobs:
       #- build
       - deploy:
           requires:
             #- build # only deploy once build job has completed
           filters:
             branches:
               only: master # only deploy on the master branch
